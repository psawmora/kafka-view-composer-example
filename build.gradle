buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
    }
}
plugins {
    id 'org.springframework.boot' version '2.2.6.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'java'
}
group 'com.psaw.kafka.stream'
version '0.0.1'
sourceCompatibility = 1.8

apply plugin: "org.springframework.boot"
apply plugin: "io.spring.dependency-management"

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/libs-snapshot' }
    maven {
        url "http://packages.confluent.io/maven/"
    }
    mavenLocal()
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
}

ext.libraries = [
        log4jVersion        : '2.13.0',
        jacksonVersion      : "2.10.1",
        lombokVersion       : "1.18.6",
        mapStructVersion    : "1.3.0.Final",
        springBootVersion   : "2.2.0.M2",
        testngVersion       : "6.11",
        embeddedKafkaVersion: "2.1.0",
        kafkaStreamsVersion : "2.4.0",
        apacheCommonsCollections : "4.4"
]


dependencies {
    compileOnly "org.projectlombok:lombok"
    developmentOnly "org.springframework.boot:spring-boot-devtools"
    compile "org.mapstruct:mapstruct-jdk8:${libraries.mapStructVersion}"
    compile "org.mapstruct:mapstruct-processor:${libraries.mapStructVersion}"

    implementation "org.springframework.boot:spring-boot-starter"
    
    implementation "com.fasterxml.jackson.core:jackson-core:${libraries.jacksonVersion}"
    implementation "com.fasterxml.jackson.core:jackson-databind:${libraries.jacksonVersion}"
    implementation "com.fasterxml.jackson.module:jackson-modules-java8:${libraries.jacksonVersion}"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-joda:${libraries.jacksonVersion}"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${libraries.jacksonVersion}"

    implementation "org.apache.logging.log4j:log4j-api:${libraries.log4jVersion}"
    implementation "org.apache.logging.log4j:log4j-core:${libraries.log4jVersion}"
    implementation "org.apache.kafka:kafka-streams:${libraries.kafkaStreamsVersion}"
    implementation "org.apache.kafka:kafka-clients:${libraries.kafkaStreamsVersion}"
    implementation "org.apache.commons:commons-collections4:${libraries.apacheCommonsCollections}"

//    implementation "org.springframework.boot:spring-context"

    annotationProcessor "org.mapstruct:mapstruct-processor:${libraries.mapStructVersion}"
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation "org.apache.kafka:kafka-streams-test-utils:${libraries.kafkaStreamsVersion}"
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation "org.testng:testng:${libraries.testngVersion}"
}

def dockerImageName = "com.psaw.kafka/kafka-processor-and-dsl-diff-project:latest"

task buildImage(type: Exec) {
    println dockerImageName
    dependsOn "build"
    workingDir "."
    commandLine "docker", "build", ".", "-t", dockerImageName
    standardOutput = new ByteArrayOutputStream()
}

test {
    useTestNG()
}
